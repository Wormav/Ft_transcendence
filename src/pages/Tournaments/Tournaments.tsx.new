import { useState, useEffect } from "react";
import styles from "./TournamentsStyle";
import type { Tournament } from "../../types/Tournament";
import { useTranslation } from "../../context/TranslationContext";
import { useSettings } from "../../context/SettingsContext";
import { getSizeTextStyle } from "../../globalStyle";
import { useTournament } from "../../context/TournamentContext";
import { useUserContext } from "../../context/UserContext";

const Tournaments: React.FC = () => {
	const { t } = useTranslation();
	const { user } = useUserContext();
	const { tournaments, loading, error: tournamentError, createTournament, fetchUserTournaments } = useTournament();
	const [maxPlayers, setMaxPlayers] = useState<4 | 6 | 8>(4);
	const [guestPlayers, setGuestPlayers] = useState<string[]>([]);
	const [localTournament, setLocalTournament] = useState<Tournament | null>(null);
	const [error, setError] = useState<string>("");
	const { size_text } = useSettings();

	useEffect(() => {
		if (user?.uuid) {
			fetchUserTournaments(user.uuid);
		}
	}, [user, fetchUserTournaments]);

	const handleAddPlayer = (index: number, name: string) => {
		const newPlayers = [...guestPlayers];
		newPlayers[index] = name;
		setGuestPlayers(newPlayers);

		const trimmedName = name.trim();
		if (trimmedName !== "") {
			const playerNames = newPlayers
				.filter((p) => p && p.trim() !== "")
				.map((p) => p.toLowerCase());
			const uniqueNames = new Set(playerNames);

			if (uniqueNames.size !== playerNames.length) {
				setError(t("tournaments.duplicateNameError"));
			} else {
				setError("");
			}
		} else {
			setError("");
		}
	};

	const getMinPlayers = (max: number) => max - 1;

	const handleCreateTournament = async () => {
		if (!user?.uuid) {
			setError("Vous devez être connecté pour créer un tournoi");
			return;
		}

		// Filtrer les joueurs vides
		const validPlayers = guestPlayers.filter(p => p && p.trim() !== "");
		const minPlayers = getMinPlayers(maxPlayers);

		if (validPlayers.length < minPlayers) {
			setError(
				t("tournaments.minPlayersError")
					.replace("{0}", minPlayers.toString())
					.replace("{1}", maxPlayers.toString()),
			);
			return;
		}

		// Vérifier les noms dupliqués
		const playerNames = validPlayers.map((p) => p.toLowerCase());
		const uniqueNames = new Set(playerNames);
		if (uniqueNames.size !== playerNames.length) {
			setError(t("tournaments.createError"));
			return;
		}

		try {
			await createTournament(user.uuid, validPlayers);
			setError("");
			// Après la création, les tournois sont récupérés dans la fonction createTournament
		} catch (err) {
			setError(err instanceof Error ? err.message : "Une erreur est survenue lors de la création du tournoi");
		}
	};

	return (
		<div className={styles.container}>
			<h1 className={`${styles.title} ${getSizeTextStyle(size_text)}`}>
				{t("tournaments.createTournament")}
			</h1>

			<div className={styles.form}>
				<select
					className={`${styles.select}  ${getSizeTextStyle(size_text)}`}
					value={maxPlayers}
					onChange={(e) => setMaxPlayers(Number(e.target.value) as 4 | 6 | 8)}
				>
					<option value={4}>4 {t("tournaments.players")}</option>
					<option value={6}>6 {t("tournaments.players")}</option>
					<option value={8}>8 {t("tournaments.players")}</option>
				</select>

				{Array.from({ length: maxPlayers - 1 }).map((_, index) => (
					<input
						key={index}
						type="text"
						className={`${styles.playerInput} ${getSizeTextStyle(size_text)}`}
						placeholder={`${t("tournaments.playerName")} ${index + 2}`}
						onChange={(e) => handleAddPlayer(index, e.target.value)}
						value={guestPlayers[index] || ""}
					/>
				))}

				{error && <p className={styles.error}>{error}</p>}
				{tournamentError && <p className={styles.error}>{tournamentError}</p>}

				<button
					className={`
						${
							guestPlayers.filter((p) => p && p.trim() !== "").length <
							getMinPlayers(maxPlayers)
								? styles.buttonDisabled
								: styles.button
						} ${getSizeTextStyle(size_text)}
					`}
					onClick={handleCreateTournament}
					disabled={
						loading ||
						guestPlayers.filter((p) => p && p.trim() !== "").length <
						getMinPlayers(maxPlayers)
					}
				>
					{loading ? t("tournaments.creating") : t("tournaments.createButton")}
				</button>
			</div>

			{tournaments.length > 0 && (
				<div className={styles.tournamentList}>
					<h2 className={`${styles.subtitle} ${getSizeTextStyle(size_text)}`}>
						{t("tournaments.yourTournaments")}
					</h2>
					{tournaments.map((tournament) => (
						<div key={tournament.uuid} className={styles.tournamentItem}>
							<p className={getSizeTextStyle(size_text)}>
								Tournoi #{tournament.uuid.substring(0, 8)}
							</p>
							<p className={getSizeTextStyle(size_text)}>
								{t("tournaments.players")}: {tournament.players.length}
							</p>
							<p className={getSizeTextStyle(size_text)}>
								{t("tournaments.status")}: {tournament.finished === 1 ? t("tournaments.finished") : t("tournaments.inProgress")}
							</p>
							{tournament.winner && (
								<p className={getSizeTextStyle(size_text)}>
									{t("tournaments.winner")}: {tournament.winner}
								</p>
							)}
						</div>
					))}
				</div>
			)}
		</div>
	);
};

export default Tournaments;
